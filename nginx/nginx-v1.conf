user root;
worker_processes auto;
#error_log /data/weblog/java/nginx/error.log;
pid /var/run/nginx.pid;

events {
    # 每个工作者的最大连接数
    worker_connections 5120;
}

http {
    # 优化Nginx静态资源的处理（sendfile、tcp_nopush、tcp_nodelay）
    # 零拷贝配置
    sendfile on;

    # 该指令必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输'效率'
    # 先将数据缓存到缓存区，存满后再发
    tcp_nopush on;

    # 该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的'实时性'
    # 有数据就发
    tcp_nodelay on;

    # nginx默认设置的http连接超时时间为75s，超过75s，会断掉当前的http连接
    # keepalive_timeout时间调小会导致上传操作可能无法完成；调大点的话，许多无效的http连接占据nginx的连接数
    keepalive_timeout 65;

    # 为了快速寻找到相应MIME type，Nginx使用散列表来存储MIME type与文件扩展名
    # types_hash_max_size影响散列表的冲突率
    # types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，解锁速度就更快
    # types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升
    types_hash_max_size 2048;

    # 限制请求体的大小，若超过所设定的大小，返回413错误
    client_max_body_size 100M;

    # 属性默认为false，会将带有下划线的参数标记为无效
    underscores_in_headers on;

    
    # 将多用途因特网邮件控制类型文件包括进来
    include mime.types;
    # 默认类型为application/octet-stream（浏览器下载）
    default_type application/octet-stream;

    # 真实服务器上一级代理的IP地址或者IP段，可以写多行
    set_real_ip_from 100.64.0.0/10;
    # 从哪个header头检索出要的IP地址
    real_ip_header X-Forwarded-For;

    # geo指令主要是根据IP来对变量进行赋值的
    geo $limited {
        # 如果客户端地址不能匹配任意一个定义的地址，nginx将使用此值。如果使用cidr，可以用“0.0.0.0/0”代替default
        default 1;

        59.111.0.0/16 0;
        59.111.209.0/24 0;
        59.111.232.0/24 0;
        59.111.36.0/24 0;
        59.111.210.0/24 0;
        59.111.239.0/24 0;
        59.111.211.0/24 0;
        223.252.218.192/27 0;
    }

    # map指令用来创建变量，但是仅在变量被接受的时候执行视图映射操作，对于处理没有引用变量的请求时，这个模块并没有性能上的缺失
    map $limited $limit {
        1 $binary_remote_addr;
        0 "";
    }

    # limit_conn_zone和limit_req_zone指令对于键为空值的将会被忽略，从而实现对于列出来的IP不做限制
    # limit_req_zone：用来限制单位时间内的请求数，即速率限制，采用的漏桶算法“leaky bucket”
    # 使用语法：limit_req_zone key zone rate
    # key：定义限流对象，binary_remote_addr是一种key，表示基于remote_addr（客户端IP）来做限流，binary_的目的是压缩内存占用量
    # zone：定义共享内存区来存储访问信息，myRateLimit:10m表示一个大小为10M，名字为myRateLimit的内存区域
    # rate：用于设置最大访问速率，rate=10r/s表示每秒最多处理10个请求。Nginx实际上以毫秒为粒度来跟踪请求信息，因此10r/s实际上是限制：每100毫秒处理一个请求
    limit_req_zone  $limit zone=req_limit:10m rate=100r/s;

    # 设置https应该才用的TLS协议
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # 指定是否使用服务器的SSL密码首选项，而不是用客户端的。默认值是on
    ssl_prefer_server_ciphers on;

    # 设置nginx日志格式
    log_format  access  '$proxy_add_x_forwarded_for - $remote_user [$time_local] "$request" "$http_host"'
          '$status $body_bytes_sent $request_body "$http_referer" '
          '"$http_user_agent" $http_x_forwarded_for '
          '"$upstream_addr" "$upstream_status" "$upstream_response_time" "$request_time"';

    # 设置打开压缩
    gzip on;
    # 针对不同种类客户端发起的请求，可以选择性地开启和关闭gzip功能
    # gzip_disable regex...
    # regex：根据客户端的浏览器标志（user-agent）来设置，支持使用正则表达式。指定的浏览器标志不使用gzip，该指令一般是用来排除一些明显不支持gzip的浏览器
    gzip_disable "msie6";

    # 虚拟服务器配置
    server {
        # 监听80端口
        listen 80;
        # 域名、ip、localhost
        server_name localhost;

        # /通用匹配，如果没有其他匹配，任何请求都会匹配到
        location / {
            # 如果服务端的响应没有设置响应类型，Nginx也没有对应文件的扩展名，就用Nginx里默认的default_type定义的处理方式
            default_type application/json;
            # 返回状态码和响应体
            return 200 '';
        }

        # =开头表示精确匹配
        # 配置stub_status模块
        location = /metrics {
            stub_status;
        }

        # = 表示精确匹配
        # ^~ 表示uri以某个常规字符串开头,大多情况下用来匹配url路径，nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）
        # ~ 正则匹配(区分大小写)
        # ~* 正则匹配(不区分大小写)
        # !~ 区分大小写不匹配
        # !~* 不区分大小写不匹配
        # / 任何请求都会匹配
    }

    # 配置上游服务器可以使用upstream进行设置，通过upstream可以实现服务的负载均衡规则，可以提高服务器的高可用性
    # upstream的基本语法如下，一个upstream需要设置一个名称，这个名称可以在server里面当作proxy主机使用
    # 一个upstream可以设置多个server，通常情况下Nginx会轮询每一个server，从而达到最基本的负载循环效果
    upstream web {
        server localhost:18081;
        # keepalive指定最大保持的长连接数（nginx到upstream的连接）为300
        # keepalive指定的数值是nginx每个worker连接后端的最大长连接数，而不是整个nginx的，而这里的后端指的是所有的后端，而不是每一个后端
        # keepalive值应该大于等于upstream中server的数量，建议是server数的2倍
        keepalive 300;
    }
}